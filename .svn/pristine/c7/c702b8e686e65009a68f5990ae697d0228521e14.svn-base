package com.hsdi.NetMe.ui.startup.phone_verification;

import android.app.Activity;
import android.content.Context;
import android.content.DialogInterface;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.design.widget.TextInputEditText;
import android.support.v4.app.Fragment;
import android.support.v7.app.AlertDialog;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Spinner;

import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import com.google.i18n.phonenumbers.PhoneNumberUtil;
import com.google.i18n.phonenumbers.Phonenumber;
import com.hsdi.NetMe.R;
import com.hsdi.NetMe.models.Country;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;

public class PhoneEntryFragment extends Fragment {

    private PRCommunications prCom;

//    @Bind(R.id.phone_verify_btn)        Button verifyBtn;
    @Bind(R.id.phone_country_spinner)   Spinner countrySpinner;
    @Bind(R.id.phone_number_entry)      TextInputEditText phoneNumberET;

    private List<Country> countries;
    private int selectedCountryPosition;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View main = inflater.inflate(R.layout.fragment_phone_entry, container, false);
        ButterKnife.bind(this, main);

        // the country spinner should change the country code EditText to match
        countrySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                selectedCountryPosition = position;
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) { }
        });

        loadCountries();

        return main;
    }

    /**
     * Click method for the verification button.
     * @param view    the view that was clicked
     * */
    @OnClick(R.id.phone_verify_btn)
    public void onClick(View view) {
        Log.i("yuyong_phone", "onClick: ");
        checkPhoneNumber();
    }

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        try {prCom = (PRCommunications) context;}
        catch (Exception e) {
            throw new ClassCastException("Calling activity must implement " + PRCommunications.class.getSimpleName());
        }
    }

    @SuppressWarnings("deprecation")
    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        try {prCom = (PRCommunications) activity;}
        catch (Exception e) {
            throw new ClassCastException("Calling activity must implement " + PRCommunications.class.getSimpleName());
        }
    }

    /**
     * Performs a few checks on the entered phone number. If everything checks out,
     * send it back to the activity to continue the verification process. If there is an issue,
     * an error message is shown
     * */
    private void checkPhoneNumber() {
        String enteredNumber = phoneNumberET.getText().toString();
        Country selectedCountry = countries.get(selectedCountryPosition);
        Log.i("yuyong_phone", "checkPhoneNumber: " + enteredNumber);
        // parsing the phone number
        Phonenumber.PhoneNumber number = null;
        PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();
        try { number = phoneUtil.parse(enteredNumber, selectedCountry.getCountryCode()); }
        catch (Exception e) { e.printStackTrace(); }

        //making sure this is a valid number
        if(enteredNumber.isEmpty() || number == null || !phoneUtil.isValidNumber(number)) {
            phoneNumberET.setError(getString(R.string.error_invalid_entry));
            return;
        }

        String formattedNumber = phoneUtil.format(number, PhoneNumberUtil.PhoneNumberFormat.RFC3966);

        String msgBuilder = getActivity().getString(R.string.phone_dialog_verify_top) +
                "\n\n" +
                formattedNumber +
                "\n\n" +
                getActivity().getString(R.string.phone_dialog_verify_bottom);

        final String countryCode = selectedCountry.getCountryCode();
        final Phonenumber.PhoneNumber finalNumber = number;
        new AlertDialog.Builder(getActivity())
                .setTitle(R.string.verify)
                .setMessage(msgBuilder)
                .setPositiveButton(
                        R.string.ok,
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                prCom.setEnteredPhone(countryCode, finalNumber);
                            }
                        }
                )
                .setNegativeButton(R.string.edit, null)
                .show();

    }

    /** loads the list of countries into the spinner */
    private void loadCountries() {
        AsyncTask.THREAD_POOL_EXECUTOR.execute(new Runnable() {
            @Override
            public void run() {
                final List<String> countryNameList = new ArrayList<>();

                try {
                    //getting the reader
                    InputStream is = getActivity().getAssets().open("countries.json");
                    InputStreamReader inputReader = new InputStreamReader(is);

                    //building the list using Gson
                    countries = new GsonBuilder().create().fromJson(inputReader, new TypeToken<ArrayList<Country>>(){}.getType());

                    //make sure that the ordering is correct
                    Collections.sort(countries);

                    //closing everything
                    inputReader.close();
                    is.close();

                    //populating name list with the country name and calling code
                    for(Country country : countries) {
                        countryNameList.add(country.getCountryName() + " (" + country.getCallingCode() + ")");
                    }

                    //update the spinner
                    if(getActivity() != null) {
                        getActivity().runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                //setting up the spinner
                                countrySpinner.setAdapter(new ArrayAdapter<>(
                                        getActivity(),
                                        R.layout.item_country_spinner,
                                        countryNameList
                                ));

                                //getting the country code
                                String countryCode = Locale.getDefault().getCountry();

                                for (int position = 0; position < countries.size(); position++) {
                                    if (countries.get(position).equals(new Country(null, null, countryCode))) {
                                        selectedCountryPosition = position;
                                        countrySpinner.setSelection(position);
                                        break;
                                    }
                                }
                            }
                        });
                    }
                }
                catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

   /* @Override
    public boolean onBackPressed() {
        Toast.makeText(getActivity(),"你点击了返回键",Toast.LENGTH_SHORT).show();
        return super.onBackPressed();
    }*/
}
